[git commit -m "hay"]
git[commit -m 'hay, this is a test']

use git
use blender for /home/william/blender/bin

git add .
a = "this is a test"

git commit -m {a}

add 7 & 4

cd["hay"]

echo "hello world"

var a = 8

a = 12

echo $a

a = 12

for i in 0..8 {
	println "hay, waddup?"
	
}

if true
{
	
}

echo [add 3 [a]]

func doStuff {
	echo abc > blah/abc.txt
	var myStr = "/tmp/abc.txt"
	echo abc > myStr
	echo abc > mySr # typo causes it to got to 'mySr' file, this is not good
	echo abc > $myStr
	echo abc >> myStr
}

func (dub:a, int:b)::abc dub:c
{
	print "\[a] \$b " $c
}
v
func abc a[int] b {}

func abc a
{
	while true
	{
		if a == 8
		{
			
		}
	}
	
	return 7
}

for i in 1, 2, 12, 24...
{
	yo $i \n
}

func Birthday name:string age:int
{
	return new name, age
}

func Birthday::itr amount:int
{
	age += amount
}

foo = Birthday "William" 19

foo.itr 4

print foo.age

func add a b
{
	return a + b
}

print add 7 9
print add 5.0 12
print add "abc" "xyz"

echo "the number is \[2 + 2]"

decltype(8) a = 3

multi a = null

if b == 3 {
	a = 3
}

if c && a is int {
	
	print(a)
}

switch a {
case int
	print(a + 1)
	
case null
	print("it is null")
	
default
}

multi a
a.my_int = 9
a.my_name = "hay"

print(a.my_int ?? 0)

var b = a

func Vec2(xIn, yIn) {
	return (x: xIn, y: yIn)
}

func Vec3(xIn, yIn, zIn) {
	return (x: xIn, y: yIn, z: zIn)
}

func &Vec2::dist() {

	return sqrt(x*x + y*y)
}

func &Vec3::dist() {
	return sqrt(x*x + y*y + z*z)
}

multi vec

let inStrs = input().split()

if inStrs.len == 2 {
	opt vec::v2 = Vec2(dub(inStrs[0]), dub(inStrs[1]))
} elif inStrs.len == 3 {
	opt vec::v3 = Vec3(dub(inStrs[0]), dub(inStrs[1]), dub(inStrs[1]))
} else {
	vec.error = void
}

if vec is error {ohshit}

print(vec::v2)

if vec isn't error {
	print("vec is v3")
	print(vec.dist())
}

if a != b {

}

if a == b == c {
	
}

type cat

func [cat].make(a: int, b: {int}) -> cat {
	
}

cat.make()

construct cat() { return (
	# ...
)}

func take_int_array(in: int.array) {
	
}

my_map = map(from: string, to: int)
my_map = (from: string, to: int).map
my_map = map(
	("hay", 1),
	("yo", 43),
	("waddup", -4),
)

func take_string_int_map(in: (from: string, to: int).map) {
	
	
}

let a = (0, 209, 32, 54, 9)...

a[2] = 8

a[..] = a[..] * 2

print(a[..])

a[var i] = i + 4

func ~int.nan() {
	
}